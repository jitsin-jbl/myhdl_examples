// File: simple_top.v
// Generated by MyHDL 0.8dev
// Date: Thu Jun 21 02:02:03 2012


`timescale 1ns/10ps

module simple_top (
    clock,
    reset,
    buttons,
    leds
);


input clock;
input reset;
input [7:0] buttons;
output [7:0] leds;
reg [7:0] leds;

reg iBus_ack;
reg [7:0] iBus_dat_i;
wire iBus_clk;
reg iGpios_7_iReg_we;
reg [15:0] iGpios_7_iReg_adr;
reg iGpios_7_iReg_stb;
reg iGpios_7_iReg_selected;
reg iGpios_7_iReg_cyc;
wire [1:0] iGpios_7_iReg_ReadOnly;
reg [0:0] iGpios_7_iReg_offset;
wire iGpios_7_iReg_rst;
reg [7:0] iGpios_7_iReg_dat_i;
reg iGpios_6_iReg_selected;
wire [1:0] iGpios_6_iReg_ReadOnly;
reg [0:0] iGpios_6_iReg_offset;
reg iGpios_5_iReg_selected;
wire [1:0] iGpios_5_iReg_ReadOnly;
reg [0:0] iGpios_5_iReg_offset;
reg iGpios_4_iReg_selected;
wire [1:0] iGpios_4_iReg_ReadOnly;
reg [0:0] iGpios_4_iReg_offset;
reg iGpios_3_iReg_selected;
wire [1:0] iGpios_3_iReg_ReadOnly;
reg [0:0] iGpios_3_iReg_offset;
reg iGpios_2_iReg_selected;
wire [1:0] iGpios_2_iReg_ReadOnly;
reg [0:0] iGpios_2_iReg_offset;
reg iGpios_1_iReg_selected;
wire [1:0] iGpios_1_iReg_ReadOnly;
reg [0:0] iGpios_1_iReg_offset;
reg iGpios_0_iReg_selected;
wire [1:0] iGpios_0_iReg_ReadOnly;
reg [0:0] iGpios_0_iReg_offset;
reg [3:0] iController_devc;
reg [7:0] iController_lbutt;
reg [7:0] iController_wbutt;
reg [2:0] iController_state;
reg [7:0] iController_rdat;

reg pins [0:8-1];
wire pouts [0:8-1];
reg iBus_dev_acks [0:8-1];
reg [7:0] iBus_dev_dats [0:8-1];
reg [0:0] iGpios_7_iReg_lregs [0:2-1];
reg [0:0] iGpios_6_iReg_lregs [0:2-1];
reg [0:0] iGpios_5_iReg_lregs [0:2-1];
reg [0:0] iGpios_4_iReg_lregs [0:2-1];
reg [0:0] iGpios_3_iReg_lregs [0:2-1];
reg [0:0] iGpios_2_iReg_lregs [0:2-1];
reg [0:0] iGpios_1_iReg_lregs [0:2-1];
reg [0:0] iGpios_0_iReg_lregs [0:2-1];

assign iGpios_7_iReg_ReadOnly = 2;
assign iGpios_6_iReg_ReadOnly = 2;
assign iGpios_5_iReg_ReadOnly = 2;
assign iGpios_4_iReg_ReadOnly = 2;
assign iGpios_3_iReg_ReadOnly = 2;
assign iGpios_2_iReg_ReadOnly = 2;
assign iGpios_1_iReg_ReadOnly = 2;
assign iGpios_0_iReg_ReadOnly = 2;



always @(posedge iBus_clk) begin: SIMPLE_TOP_ICONTROLLER_HDL_SILLY
    if ((!iGpios_7_iReg_rst)) begin
        iGpios_7_iReg_dat_i <= 0;
        iController_state <= 3'b000;
    end
    else begin
        case (iController_state)
            3'b000: begin
                if ((buttons > 0)) begin
                    iController_lbutt <= buttons;
                    iController_wbutt <= buttons;
                    iController_devc <= 0;
                    iController_state <= 3'b001;
                end
            end
            3'b001: begin
                if ((iController_lbutt > 0)) begin
                    if (iController_lbutt[0]) begin
                        iGpios_7_iReg_adr <= (iController_devc * 256);
                        iGpios_7_iReg_we <= 1'b0;
                        iGpios_7_iReg_cyc <= 1'b1;
                        iGpios_7_iReg_stb <= 1'b1;
                        iController_state <= 3'b010;
                    end
                    iController_lbutt <= (iController_lbutt >>> 1);
                    iController_devc <= (iController_devc + 1);
                end
                else begin
                    if ((iController_wbutt != buttons)) begin
                        iController_state <= 3'b000;
                    end
                end
            end
            3'b010: begin
                iGpios_7_iReg_we <= 1'b0;
                iGpios_7_iReg_cyc <= 1'b0;
                iGpios_7_iReg_stb <= 1'b0;
                if (iBus_ack) begin
                    iController_rdat <= (~iBus_dat_i);
                    iController_state <= 3'b011;
                end
            end
            3'b011: begin
                if ((!iBus_ack)) begin
                    iGpios_7_iReg_dat_i <= iController_rdat;
                    iGpios_7_iReg_we <= 1'b1;
                    iGpios_7_iReg_cyc <= 1'b1;
                    iGpios_7_iReg_stb <= 1'b1;
                    iController_state <= 3'b100;
                end
                else begin
                    iGpios_7_iReg_we <= 1'b0;
                    iGpios_7_iReg_cyc <= 1'b0;
                    iGpios_7_iReg_stb <= 1'b0;
                end
            end
            3'b100: begin
                if (iBus_ack) begin
                    iController_state <= 3'b001;
                end
                iGpios_7_iReg_we <= 1'b0;
                iGpios_7_iReg_cyc <= 1'b0;
                iGpios_7_iReg_stb <= 1'b0;
            end
        endcase
    end
end



assign iBus_clk = clock;
assign iGpios_7_iReg_rst = reset;


always @(iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) begin: SIMPLE_TOP_IGPIOS_0_IREG_HDL_DECODE
    if ((iGpios_7_iReg_cyc && iGpios_7_iReg_stb && ((iGpios_7_iReg_adr >= 0) && (iGpios_7_iReg_adr <= (0 + 1))))) begin
        iGpios_0_iReg_selected = 1'b1;
        iGpios_0_iReg_offset = (iGpios_7_iReg_adr - 0);
    end
    else begin
        iGpios_0_iReg_selected = 1'b0;
        iGpios_0_iReg_offset = 0;
    end
end


always @(posedge iBus_clk) begin: SIMPLE_TOP_IGPIOS_0_IREG_HDL_WB_REGISTER
    integer ii;
    if ((!iGpios_7_iReg_rst)) begin
        iBus_dev_dats[0] <= 0;
        for (ii=0; ii<2; ii=ii+1) begin
            iGpios_0_iReg_lregs[ii] <= 0;
        end
    end
    else begin
        if (iGpios_0_iReg_selected) begin
            iBus_dev_acks[0] <= 1'b1;
            if (iGpios_7_iReg_we) begin
                if ((!iGpios_0_iReg_ReadOnly[iGpios_0_iReg_offset])) begin
                    iGpios_0_iReg_lregs[iGpios_0_iReg_offset] <= iGpios_7_iReg_dat_i[1-1:0];
                end
                iBus_dev_dats[0] <= 0;
            end
            else begin
                iBus_dev_dats[0] <= iGpios_0_iReg_lregs[iGpios_0_iReg_offset];
            end
        end
        else begin
            iBus_dev_dats[0] <= 0;
            iBus_dev_acks[0] <= 1'b0;
        end
    end
end



assign pouts[0] = iGpios_0_iReg_lregs[0][0];
assign iGpios_0_iReg_lregs[1] = pins[0];


always @(iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) begin: SIMPLE_TOP_IGPIOS_1_IREG_HDL_DECODE
    if ((iGpios_7_iReg_cyc && iGpios_7_iReg_stb && ((iGpios_7_iReg_adr >= 256) && (iGpios_7_iReg_adr <= (256 + 1))))) begin
        iGpios_1_iReg_selected = 1'b1;
        iGpios_1_iReg_offset = (iGpios_7_iReg_adr - 256);
    end
    else begin
        iGpios_1_iReg_selected = 1'b0;
        iGpios_1_iReg_offset = 0;
    end
end


always @(posedge iBus_clk) begin: SIMPLE_TOP_IGPIOS_1_IREG_HDL_WB_REGISTER
    integer ii;
    if ((!iGpios_7_iReg_rst)) begin
        iBus_dev_dats[1] <= 0;
        for (ii=0; ii<2; ii=ii+1) begin
            iGpios_1_iReg_lregs[ii] <= 0;
        end
    end
    else begin
        if (iGpios_1_iReg_selected) begin
            iBus_dev_acks[1] <= 1'b1;
            if (iGpios_7_iReg_we) begin
                if ((!iGpios_1_iReg_ReadOnly[iGpios_1_iReg_offset])) begin
                    iGpios_1_iReg_lregs[iGpios_1_iReg_offset] <= iGpios_7_iReg_dat_i[1-1:0];
                end
                iBus_dev_dats[1] <= 0;
            end
            else begin
                iBus_dev_dats[1] <= iGpios_1_iReg_lregs[iGpios_1_iReg_offset];
            end
        end
        else begin
            iBus_dev_dats[1] <= 0;
            iBus_dev_acks[1] <= 1'b0;
        end
    end
end



assign pouts[1] = iGpios_1_iReg_lregs[0][0];
assign iGpios_1_iReg_lregs[1] = pins[1];


always @(iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) begin: SIMPLE_TOP_IGPIOS_2_IREG_HDL_DECODE
    if ((iGpios_7_iReg_cyc && iGpios_7_iReg_stb && ((iGpios_7_iReg_adr >= 512) && (iGpios_7_iReg_adr <= (512 + 1))))) begin
        iGpios_2_iReg_selected = 1'b1;
        iGpios_2_iReg_offset = (iGpios_7_iReg_adr - 512);
    end
    else begin
        iGpios_2_iReg_selected = 1'b0;
        iGpios_2_iReg_offset = 0;
    end
end


always @(posedge iBus_clk) begin: SIMPLE_TOP_IGPIOS_2_IREG_HDL_WB_REGISTER
    integer ii;
    if ((!iGpios_7_iReg_rst)) begin
        iBus_dev_dats[2] <= 0;
        for (ii=0; ii<2; ii=ii+1) begin
            iGpios_2_iReg_lregs[ii] <= 0;
        end
    end
    else begin
        if (iGpios_2_iReg_selected) begin
            iBus_dev_acks[2] <= 1'b1;
            if (iGpios_7_iReg_we) begin
                if ((!iGpios_2_iReg_ReadOnly[iGpios_2_iReg_offset])) begin
                    iGpios_2_iReg_lregs[iGpios_2_iReg_offset] <= iGpios_7_iReg_dat_i[1-1:0];
                end
                iBus_dev_dats[2] <= 0;
            end
            else begin
                iBus_dev_dats[2] <= iGpios_2_iReg_lregs[iGpios_2_iReg_offset];
            end
        end
        else begin
            iBus_dev_dats[2] <= 0;
            iBus_dev_acks[2] <= 1'b0;
        end
    end
end



assign pouts[2] = iGpios_2_iReg_lregs[0][0];
assign iGpios_2_iReg_lregs[1] = pins[2];


always @(iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) begin: SIMPLE_TOP_IGPIOS_3_IREG_HDL_DECODE
    if ((iGpios_7_iReg_cyc && iGpios_7_iReg_stb && ((iGpios_7_iReg_adr >= 768) && (iGpios_7_iReg_adr <= (768 + 1))))) begin
        iGpios_3_iReg_selected = 1'b1;
        iGpios_3_iReg_offset = (iGpios_7_iReg_adr - 768);
    end
    else begin
        iGpios_3_iReg_selected = 1'b0;
        iGpios_3_iReg_offset = 0;
    end
end


always @(posedge iBus_clk) begin: SIMPLE_TOP_IGPIOS_3_IREG_HDL_WB_REGISTER
    integer ii;
    if ((!iGpios_7_iReg_rst)) begin
        iBus_dev_dats[3] <= 0;
        for (ii=0; ii<2; ii=ii+1) begin
            iGpios_3_iReg_lregs[ii] <= 0;
        end
    end
    else begin
        if (iGpios_3_iReg_selected) begin
            iBus_dev_acks[3] <= 1'b1;
            if (iGpios_7_iReg_we) begin
                if ((!iGpios_3_iReg_ReadOnly[iGpios_3_iReg_offset])) begin
                    iGpios_3_iReg_lregs[iGpios_3_iReg_offset] <= iGpios_7_iReg_dat_i[1-1:0];
                end
                iBus_dev_dats[3] <= 0;
            end
            else begin
                iBus_dev_dats[3] <= iGpios_3_iReg_lregs[iGpios_3_iReg_offset];
            end
        end
        else begin
            iBus_dev_dats[3] <= 0;
            iBus_dev_acks[3] <= 1'b0;
        end
    end
end



assign pouts[3] = iGpios_3_iReg_lregs[0][0];
assign iGpios_3_iReg_lregs[1] = pins[3];


always @(iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) begin: SIMPLE_TOP_IGPIOS_4_IREG_HDL_DECODE
    if ((iGpios_7_iReg_cyc && iGpios_7_iReg_stb && ((iGpios_7_iReg_adr >= 1024) && (iGpios_7_iReg_adr <= (1024 + 1))))) begin
        iGpios_4_iReg_selected = 1'b1;
        iGpios_4_iReg_offset = (iGpios_7_iReg_adr - 1024);
    end
    else begin
        iGpios_4_iReg_selected = 1'b0;
        iGpios_4_iReg_offset = 0;
    end
end


always @(posedge iBus_clk) begin: SIMPLE_TOP_IGPIOS_4_IREG_HDL_WB_REGISTER
    integer ii;
    if ((!iGpios_7_iReg_rst)) begin
        iBus_dev_dats[4] <= 0;
        for (ii=0; ii<2; ii=ii+1) begin
            iGpios_4_iReg_lregs[ii] <= 0;
        end
    end
    else begin
        if (iGpios_4_iReg_selected) begin
            iBus_dev_acks[4] <= 1'b1;
            if (iGpios_7_iReg_we) begin
                if ((!iGpios_4_iReg_ReadOnly[iGpios_4_iReg_offset])) begin
                    iGpios_4_iReg_lregs[iGpios_4_iReg_offset] <= iGpios_7_iReg_dat_i[1-1:0];
                end
                iBus_dev_dats[4] <= 0;
            end
            else begin
                iBus_dev_dats[4] <= iGpios_4_iReg_lregs[iGpios_4_iReg_offset];
            end
        end
        else begin
            iBus_dev_dats[4] <= 0;
            iBus_dev_acks[4] <= 1'b0;
        end
    end
end



assign pouts[4] = iGpios_4_iReg_lregs[0][0];
assign iGpios_4_iReg_lregs[1] = pins[4];


always @(iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) begin: SIMPLE_TOP_IGPIOS_5_IREG_HDL_DECODE
    if ((iGpios_7_iReg_cyc && iGpios_7_iReg_stb && ((iGpios_7_iReg_adr >= 1280) && (iGpios_7_iReg_adr <= (1280 + 1))))) begin
        iGpios_5_iReg_selected = 1'b1;
        iGpios_5_iReg_offset = (iGpios_7_iReg_adr - 1280);
    end
    else begin
        iGpios_5_iReg_selected = 1'b0;
        iGpios_5_iReg_offset = 0;
    end
end


always @(posedge iBus_clk) begin: SIMPLE_TOP_IGPIOS_5_IREG_HDL_WB_REGISTER
    integer ii;
    if ((!iGpios_7_iReg_rst)) begin
        iBus_dev_dats[5] <= 0;
        for (ii=0; ii<2; ii=ii+1) begin
            iGpios_5_iReg_lregs[ii] <= 0;
        end
    end
    else begin
        if (iGpios_5_iReg_selected) begin
            iBus_dev_acks[5] <= 1'b1;
            if (iGpios_7_iReg_we) begin
                if ((!iGpios_5_iReg_ReadOnly[iGpios_5_iReg_offset])) begin
                    iGpios_5_iReg_lregs[iGpios_5_iReg_offset] <= iGpios_7_iReg_dat_i[1-1:0];
                end
                iBus_dev_dats[5] <= 0;
            end
            else begin
                iBus_dev_dats[5] <= iGpios_5_iReg_lregs[iGpios_5_iReg_offset];
            end
        end
        else begin
            iBus_dev_dats[5] <= 0;
            iBus_dev_acks[5] <= 1'b0;
        end
    end
end



assign pouts[5] = iGpios_5_iReg_lregs[0][0];
assign iGpios_5_iReg_lregs[1] = pins[5];


always @(iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) begin: SIMPLE_TOP_IGPIOS_6_IREG_HDL_DECODE
    if ((iGpios_7_iReg_cyc && iGpios_7_iReg_stb && ((iGpios_7_iReg_adr >= 1536) && (iGpios_7_iReg_adr <= (1536 + 1))))) begin
        iGpios_6_iReg_selected = 1'b1;
        iGpios_6_iReg_offset = (iGpios_7_iReg_adr - 1536);
    end
    else begin
        iGpios_6_iReg_selected = 1'b0;
        iGpios_6_iReg_offset = 0;
    end
end


always @(posedge iBus_clk) begin: SIMPLE_TOP_IGPIOS_6_IREG_HDL_WB_REGISTER
    integer ii;
    if ((!iGpios_7_iReg_rst)) begin
        iBus_dev_dats[6] <= 0;
        for (ii=0; ii<2; ii=ii+1) begin
            iGpios_6_iReg_lregs[ii] <= 0;
        end
    end
    else begin
        if (iGpios_6_iReg_selected) begin
            iBus_dev_acks[6] <= 1'b1;
            if (iGpios_7_iReg_we) begin
                if ((!iGpios_6_iReg_ReadOnly[iGpios_6_iReg_offset])) begin
                    iGpios_6_iReg_lregs[iGpios_6_iReg_offset] <= iGpios_7_iReg_dat_i[1-1:0];
                end
                iBus_dev_dats[6] <= 0;
            end
            else begin
                iBus_dev_dats[6] <= iGpios_6_iReg_lregs[iGpios_6_iReg_offset];
            end
        end
        else begin
            iBus_dev_dats[6] <= 0;
            iBus_dev_acks[6] <= 1'b0;
        end
    end
end



assign pouts[6] = iGpios_6_iReg_lregs[0][0];
assign iGpios_6_iReg_lregs[1] = pins[6];


always @(iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) begin: SIMPLE_TOP_IGPIOS_7_IREG_HDL_DECODE
    if ((iGpios_7_iReg_cyc && iGpios_7_iReg_stb && ((iGpios_7_iReg_adr >= 1792) && (iGpios_7_iReg_adr <= (1792 + 1))))) begin
        iGpios_7_iReg_selected = 1'b1;
        iGpios_7_iReg_offset = (iGpios_7_iReg_adr - 1792);
    end
    else begin
        iGpios_7_iReg_selected = 1'b0;
        iGpios_7_iReg_offset = 0;
    end
end


always @(posedge iBus_clk) begin: SIMPLE_TOP_IGPIOS_7_IREG_HDL_WB_REGISTER
    integer ii;
    if ((!iGpios_7_iReg_rst)) begin
        iBus_dev_dats[7] <= 0;
        for (ii=0; ii<2; ii=ii+1) begin
            iGpios_7_iReg_lregs[ii] <= 0;
        end
    end
    else begin
        if (iGpios_7_iReg_selected) begin
            iBus_dev_acks[7] <= 1'b1;
            if (iGpios_7_iReg_we) begin
                if ((!iGpios_7_iReg_ReadOnly[iGpios_7_iReg_offset])) begin
                    iGpios_7_iReg_lregs[iGpios_7_iReg_offset] <= iGpios_7_iReg_dat_i[1-1:0];
                end
                iBus_dev_dats[7] <= 0;
            end
            else begin
                iBus_dev_dats[7] <= iGpios_7_iReg_lregs[iGpios_7_iReg_offset];
            end
        end
        else begin
            iBus_dev_dats[7] <= 0;
            iBus_dev_acks[7] <= 1'b0;
        end
    end
end



assign pouts[7] = iGpios_7_iReg_lregs[0][0];
assign iGpios_7_iReg_lregs[1] = pins[7];


always @(iBus_dev_dats[0], iBus_dev_dats[1], iBus_dev_dats[2], iBus_dev_dats[3], iBus_dev_dats[4], iBus_dev_dats[5], iBus_dev_dats[6], iBus_dev_dats[7], iBus_dev_acks[0], iBus_dev_acks[1], iBus_dev_acks[2], iBus_dev_acks[3], iBus_dev_acks[4], iBus_dev_acks[5], iBus_dev_acks[6], iBus_dev_acks[7]) begin: SIMPLE_TOP_IBUS_HDL_OR_COMBINE
    integer ii;
    integer acks;
    integer dats;
    dats = 0;
    acks = 0;
    for (ii=0; ii<8; ii=ii+1) begin
        dats = (dats | iBus_dev_dats[ii]);
        acks = (acks | iBus_dev_acks[ii]);
    end
    iBus_dat_i = dats;
    iBus_ack = acks;
end


always @(buttons, pouts[0], pouts[1], pouts[2], pouts[3], pouts[4], pouts[5], pouts[6], pouts[7]) begin: SIMPLE_TOP_HDL_ASSIGNS
    integer ii;
    for (ii=0; ii<8; ii=ii+1) begin
        leds[ii] = pouts[ii];
        pins[ii] = buttons[ii];
    end
end

endmodule
