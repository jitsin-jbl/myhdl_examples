-- File: simple_top.vhd
-- Generated by MyHDL 0.8dev
-- Date: Thu Jun 21 02:02:03 2012



package pck_simple_top is

    type t_enum_States_1 is (
    ScanButtons,
    DoButtons,
    ReadBus,
    WriteBus,
    WriteBusEnd
);

end package pck_simple_top;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_08dev.all;

use work.pck_simple_top.all;

entity simple_top is
    port (
        clock: in std_logic;
        reset: in std_logic;
        buttons: in unsigned(7 downto 0);
        leds: out unsigned(7 downto 0)
    );
end entity simple_top;


architecture MyHDL of simple_top is

signal iBus_ack: std_logic;
signal iBus_dat_i: unsigned(7 downto 0);
signal iBus_clk: std_logic;
signal iGpios_7_iReg_we: std_logic;
signal iGpios_7_iReg_adr: unsigned(15 downto 0);
signal iGpios_7_iReg_stb: std_logic;
signal iGpios_7_iReg_selected: std_logic;
signal iGpios_7_iReg_cyc: std_logic;
signal iGpios_7_iReg_ReadOnly: unsigned(1 downto 0);
signal iGpios_7_iReg_offset: unsigned(0 downto 0);
signal iGpios_7_iReg_rst: std_logic;
signal iGpios_7_iReg_dat_i: unsigned(7 downto 0);
signal iGpios_6_iReg_selected: std_logic;
signal iGpios_6_iReg_ReadOnly: unsigned(1 downto 0);
signal iGpios_6_iReg_offset: unsigned(0 downto 0);
signal iGpios_5_iReg_selected: std_logic;
signal iGpios_5_iReg_ReadOnly: unsigned(1 downto 0);
signal iGpios_5_iReg_offset: unsigned(0 downto 0);
signal iGpios_4_iReg_selected: std_logic;
signal iGpios_4_iReg_ReadOnly: unsigned(1 downto 0);
signal iGpios_4_iReg_offset: unsigned(0 downto 0);
signal iGpios_3_iReg_selected: std_logic;
signal iGpios_3_iReg_ReadOnly: unsigned(1 downto 0);
signal iGpios_3_iReg_offset: unsigned(0 downto 0);
signal iGpios_2_iReg_selected: std_logic;
signal iGpios_2_iReg_ReadOnly: unsigned(1 downto 0);
signal iGpios_2_iReg_offset: unsigned(0 downto 0);
signal iGpios_1_iReg_selected: std_logic;
signal iGpios_1_iReg_ReadOnly: unsigned(1 downto 0);
signal iGpios_1_iReg_offset: unsigned(0 downto 0);
signal iGpios_0_iReg_selected: std_logic;
signal iGpios_0_iReg_ReadOnly: unsigned(1 downto 0);
signal iGpios_0_iReg_offset: unsigned(0 downto 0);
signal iController_devc: unsigned(3 downto 0);
signal iController_lbutt: unsigned(7 downto 0);
signal iController_wbutt: unsigned(7 downto 0);
signal iController_state: t_enum_States_1;
signal iController_rdat: unsigned(7 downto 0);
type t_array_pins is array(0 to 8-1) of std_logic;
signal pins: t_array_pins;
type t_array_pouts is array(0 to 8-1) of std_logic;
signal pouts: t_array_pouts;
type t_array_iBus_dev_acks is array(0 to 8-1) of std_logic;
signal iBus_dev_acks: t_array_iBus_dev_acks;
type t_array_iBus_dev_dats is array(0 to 8-1) of unsigned(7 downto 0);
signal iBus_dev_dats: t_array_iBus_dev_dats;
type t_array_iGpios_7_iReg_lregs is array(0 to 2-1) of unsigned(0 downto 0);
signal iGpios_7_iReg_lregs: t_array_iGpios_7_iReg_lregs;
type t_array_iGpios_6_iReg_lregs is array(0 to 2-1) of unsigned(0 downto 0);
signal iGpios_6_iReg_lregs: t_array_iGpios_6_iReg_lregs;
type t_array_iGpios_5_iReg_lregs is array(0 to 2-1) of unsigned(0 downto 0);
signal iGpios_5_iReg_lregs: t_array_iGpios_5_iReg_lregs;
type t_array_iGpios_4_iReg_lregs is array(0 to 2-1) of unsigned(0 downto 0);
signal iGpios_4_iReg_lregs: t_array_iGpios_4_iReg_lregs;
type t_array_iGpios_3_iReg_lregs is array(0 to 2-1) of unsigned(0 downto 0);
signal iGpios_3_iReg_lregs: t_array_iGpios_3_iReg_lregs;
type t_array_iGpios_2_iReg_lregs is array(0 to 2-1) of unsigned(0 downto 0);
signal iGpios_2_iReg_lregs: t_array_iGpios_2_iReg_lregs;
type t_array_iGpios_1_iReg_lregs is array(0 to 2-1) of unsigned(0 downto 0);
signal iGpios_1_iReg_lregs: t_array_iGpios_1_iReg_lregs;
type t_array_iGpios_0_iReg_lregs is array(0 to 2-1) of unsigned(0 downto 0);
signal iGpios_0_iReg_lregs: t_array_iGpios_0_iReg_lregs;

begin

iGpios_7_iReg_ReadOnly <= to_unsigned(2, 2);
iGpios_6_iReg_ReadOnly <= to_unsigned(2, 2);
iGpios_5_iReg_ReadOnly <= to_unsigned(2, 2);
iGpios_4_iReg_ReadOnly <= to_unsigned(2, 2);
iGpios_3_iReg_ReadOnly <= to_unsigned(2, 2);
iGpios_2_iReg_ReadOnly <= to_unsigned(2, 2);
iGpios_1_iReg_ReadOnly <= to_unsigned(2, 2);
iGpios_0_iReg_ReadOnly <= to_unsigned(2, 2);



SIMPLE_TOP_ICONTROLLER_HDL_SILLY: process (iBus_clk) is
begin
    if rising_edge(iBus_clk) then
        if (not to_boolean(iGpios_7_iReg_rst)) then
            iGpios_7_iReg_dat_i <= "00000000";
            iController_state <= ScanButtons;
        else
            case iController_state is
                when ScanButtons =>
                    if (buttons > 0) then
                        iController_lbutt <= buttons;
                        iController_wbutt <= buttons;
                        iController_devc <= "0000";
                        iController_state <= DoButtons;
                    end if;
                when DoButtons =>
                    if (iController_lbutt > 0) then
                        if to_boolean(iController_lbutt(0)) then
                            iGpios_7_iReg_adr <= resize(resize(iController_devc, 12) * 256, 16);
                            iGpios_7_iReg_we <= '0';
                            iGpios_7_iReg_cyc <= '1';
                            iGpios_7_iReg_stb <= '1';
                            iController_state <= ReadBus;
                        end if;
                        iController_lbutt <= shift_right(iController_lbutt, 1);
                        iController_devc <= (iController_devc + 1);
                    else
                        if (iController_wbutt /= buttons) then
                            iController_state <= ScanButtons;
                        end if;
                    end if;
                when ReadBus =>
                    iGpios_7_iReg_we <= '0';
                    iGpios_7_iReg_cyc <= '0';
                    iGpios_7_iReg_stb <= '0';
                    if to_boolean(iBus_ack) then
                        iController_rdat <= (not iBus_dat_i);
                        iController_state <= WriteBus;
                    end if;
                when WriteBus =>
                    if (not to_boolean(iBus_ack)) then
                        iGpios_7_iReg_dat_i <= iController_rdat;
                        iGpios_7_iReg_we <= '1';
                        iGpios_7_iReg_cyc <= '1';
                        iGpios_7_iReg_stb <= '1';
                        iController_state <= WriteBusEnd;
                    else
                        iGpios_7_iReg_we <= '0';
                        iGpios_7_iReg_cyc <= '0';
                        iGpios_7_iReg_stb <= '0';
                    end if;
                when others => -- WriteBusEnd
                    if to_boolean(iBus_ack) then
                        iController_state <= DoButtons;
                    end if;
                    iGpios_7_iReg_we <= '0';
                    iGpios_7_iReg_cyc <= '0';
                    iGpios_7_iReg_stb <= '0';
            end case;
        end if;
    end if;
end process SIMPLE_TOP_ICONTROLLER_HDL_SILLY;



iBus_clk <= clock;
iGpios_7_iReg_rst <= reset;


SIMPLE_TOP_IGPIOS_0_IREG_HDL_DECODE: process (iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) is
begin
    if (to_boolean(iGpios_7_iReg_cyc) and to_boolean(iGpios_7_iReg_stb) and ((iGpios_7_iReg_adr >= 0) and (signed(resize(iGpios_7_iReg_adr, 17)) <= (0 + 1)))) then
        iGpios_0_iReg_selected <= '1';
        iGpios_0_iReg_offset <= resize(iGpios_7_iReg_adr - 0, 1);
    else
        iGpios_0_iReg_selected <= '0';
        iGpios_0_iReg_offset <= "0";
    end if;
end process SIMPLE_TOP_IGPIOS_0_IREG_HDL_DECODE;


SIMPLE_TOP_IGPIOS_0_IREG_HDL_WB_REGISTER: process (iBus_clk) is
begin
    if rising_edge(iBus_clk) then
        if (not to_boolean(iGpios_7_iReg_rst)) then
            iBus_dev_dats(0) <= "00000000";
            for ii in 0 to 2-1 loop
                iGpios_0_iReg_lregs(ii) <= "0";
            end loop;
        else
            if to_boolean(iGpios_0_iReg_selected) then
                iBus_dev_acks(0) <= '1';
                if to_boolean(iGpios_7_iReg_we) then
                    if (not to_integer(iGpios_0_iReg_ReadOnly(to_integer(iGpios_0_iReg_offset)))) then
                        iGpios_0_iReg_lregs(to_integer(iGpios_0_iReg_offset)) <= iGpios_7_iReg_dat_i(1-1 downto 0);
                    end if;
                    iBus_dev_dats(0) <= "00000000";
                else
                    iBus_dev_dats(0) <= resize(iGpios_0_iReg_lregs(to_integer(iGpios_0_iReg_offset)), 8);
                end if;
            else
                iBus_dev_dats(0) <= "00000000";
                iBus_dev_acks(0) <= '0';
            end if;
        end if;
    end if;
end process SIMPLE_TOP_IGPIOS_0_IREG_HDL_WB_REGISTER;



pouts(0) <= iGpios_0_iReg_lregs(0)(0);
iGpios_0_iReg_lregs(1) <= to_unsigned(pins(0), 1);


SIMPLE_TOP_IGPIOS_1_IREG_HDL_DECODE: process (iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) is
begin
    if (to_boolean(iGpios_7_iReg_cyc) and to_boolean(iGpios_7_iReg_stb) and ((iGpios_7_iReg_adr >= 256) and (signed(resize(iGpios_7_iReg_adr, 17)) <= (256 + 1)))) then
        iGpios_1_iReg_selected <= '1';
        iGpios_1_iReg_offset <= resize(iGpios_7_iReg_adr - 256, 1);
    else
        iGpios_1_iReg_selected <= '0';
        iGpios_1_iReg_offset <= "0";
    end if;
end process SIMPLE_TOP_IGPIOS_1_IREG_HDL_DECODE;


SIMPLE_TOP_IGPIOS_1_IREG_HDL_WB_REGISTER: process (iBus_clk) is
begin
    if rising_edge(iBus_clk) then
        if (not to_boolean(iGpios_7_iReg_rst)) then
            iBus_dev_dats(1) <= "00000000";
            for ii in 0 to 2-1 loop
                iGpios_1_iReg_lregs(ii) <= "0";
            end loop;
        else
            if to_boolean(iGpios_1_iReg_selected) then
                iBus_dev_acks(1) <= '1';
                if to_boolean(iGpios_7_iReg_we) then
                    if (not to_integer(iGpios_1_iReg_ReadOnly(to_integer(iGpios_1_iReg_offset)))) then
                        iGpios_1_iReg_lregs(to_integer(iGpios_1_iReg_offset)) <= iGpios_7_iReg_dat_i(1-1 downto 0);
                    end if;
                    iBus_dev_dats(1) <= "00000000";
                else
                    iBus_dev_dats(1) <= resize(iGpios_1_iReg_lregs(to_integer(iGpios_1_iReg_offset)), 8);
                end if;
            else
                iBus_dev_dats(1) <= "00000000";
                iBus_dev_acks(1) <= '0';
            end if;
        end if;
    end if;
end process SIMPLE_TOP_IGPIOS_1_IREG_HDL_WB_REGISTER;



pouts(1) <= iGpios_1_iReg_lregs(0)(0);
iGpios_1_iReg_lregs(1) <= to_unsigned(pins(1), 1);


SIMPLE_TOP_IGPIOS_2_IREG_HDL_DECODE: process (iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) is
begin
    if (to_boolean(iGpios_7_iReg_cyc) and to_boolean(iGpios_7_iReg_stb) and ((iGpios_7_iReg_adr >= 512) and (signed(resize(iGpios_7_iReg_adr, 17)) <= (512 + 1)))) then
        iGpios_2_iReg_selected <= '1';
        iGpios_2_iReg_offset <= resize(iGpios_7_iReg_adr - 512, 1);
    else
        iGpios_2_iReg_selected <= '0';
        iGpios_2_iReg_offset <= "0";
    end if;
end process SIMPLE_TOP_IGPIOS_2_IREG_HDL_DECODE;


SIMPLE_TOP_IGPIOS_2_IREG_HDL_WB_REGISTER: process (iBus_clk) is
begin
    if rising_edge(iBus_clk) then
        if (not to_boolean(iGpios_7_iReg_rst)) then
            iBus_dev_dats(2) <= "00000000";
            for ii in 0 to 2-1 loop
                iGpios_2_iReg_lregs(ii) <= "0";
            end loop;
        else
            if to_boolean(iGpios_2_iReg_selected) then
                iBus_dev_acks(2) <= '1';
                if to_boolean(iGpios_7_iReg_we) then
                    if (not to_integer(iGpios_2_iReg_ReadOnly(to_integer(iGpios_2_iReg_offset)))) then
                        iGpios_2_iReg_lregs(to_integer(iGpios_2_iReg_offset)) <= iGpios_7_iReg_dat_i(1-1 downto 0);
                    end if;
                    iBus_dev_dats(2) <= "00000000";
                else
                    iBus_dev_dats(2) <= resize(iGpios_2_iReg_lregs(to_integer(iGpios_2_iReg_offset)), 8);
                end if;
            else
                iBus_dev_dats(2) <= "00000000";
                iBus_dev_acks(2) <= '0';
            end if;
        end if;
    end if;
end process SIMPLE_TOP_IGPIOS_2_IREG_HDL_WB_REGISTER;



pouts(2) <= iGpios_2_iReg_lregs(0)(0);
iGpios_2_iReg_lregs(1) <= to_unsigned(pins(2), 1);


SIMPLE_TOP_IGPIOS_3_IREG_HDL_DECODE: process (iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) is
begin
    if (to_boolean(iGpios_7_iReg_cyc) and to_boolean(iGpios_7_iReg_stb) and ((iGpios_7_iReg_adr >= 768) and (signed(resize(iGpios_7_iReg_adr, 17)) <= (768 + 1)))) then
        iGpios_3_iReg_selected <= '1';
        iGpios_3_iReg_offset <= resize(iGpios_7_iReg_adr - 768, 1);
    else
        iGpios_3_iReg_selected <= '0';
        iGpios_3_iReg_offset <= "0";
    end if;
end process SIMPLE_TOP_IGPIOS_3_IREG_HDL_DECODE;


SIMPLE_TOP_IGPIOS_3_IREG_HDL_WB_REGISTER: process (iBus_clk) is
begin
    if rising_edge(iBus_clk) then
        if (not to_boolean(iGpios_7_iReg_rst)) then
            iBus_dev_dats(3) <= "00000000";
            for ii in 0 to 2-1 loop
                iGpios_3_iReg_lregs(ii) <= "0";
            end loop;
        else
            if to_boolean(iGpios_3_iReg_selected) then
                iBus_dev_acks(3) <= '1';
                if to_boolean(iGpios_7_iReg_we) then
                    if (not to_integer(iGpios_3_iReg_ReadOnly(to_integer(iGpios_3_iReg_offset)))) then
                        iGpios_3_iReg_lregs(to_integer(iGpios_3_iReg_offset)) <= iGpios_7_iReg_dat_i(1-1 downto 0);
                    end if;
                    iBus_dev_dats(3) <= "00000000";
                else
                    iBus_dev_dats(3) <= resize(iGpios_3_iReg_lregs(to_integer(iGpios_3_iReg_offset)), 8);
                end if;
            else
                iBus_dev_dats(3) <= "00000000";
                iBus_dev_acks(3) <= '0';
            end if;
        end if;
    end if;
end process SIMPLE_TOP_IGPIOS_3_IREG_HDL_WB_REGISTER;



pouts(3) <= iGpios_3_iReg_lregs(0)(0);
iGpios_3_iReg_lregs(1) <= to_unsigned(pins(3), 1);


SIMPLE_TOP_IGPIOS_4_IREG_HDL_DECODE: process (iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) is
begin
    if (to_boolean(iGpios_7_iReg_cyc) and to_boolean(iGpios_7_iReg_stb) and ((iGpios_7_iReg_adr >= 1024) and (signed(resize(iGpios_7_iReg_adr, 17)) <= (1024 + 1)))) then
        iGpios_4_iReg_selected <= '1';
        iGpios_4_iReg_offset <= resize(iGpios_7_iReg_adr - 1024, 1);
    else
        iGpios_4_iReg_selected <= '0';
        iGpios_4_iReg_offset <= "0";
    end if;
end process SIMPLE_TOP_IGPIOS_4_IREG_HDL_DECODE;


SIMPLE_TOP_IGPIOS_4_IREG_HDL_WB_REGISTER: process (iBus_clk) is
begin
    if rising_edge(iBus_clk) then
        if (not to_boolean(iGpios_7_iReg_rst)) then
            iBus_dev_dats(4) <= "00000000";
            for ii in 0 to 2-1 loop
                iGpios_4_iReg_lregs(ii) <= "0";
            end loop;
        else
            if to_boolean(iGpios_4_iReg_selected) then
                iBus_dev_acks(4) <= '1';
                if to_boolean(iGpios_7_iReg_we) then
                    if (not to_integer(iGpios_4_iReg_ReadOnly(to_integer(iGpios_4_iReg_offset)))) then
                        iGpios_4_iReg_lregs(to_integer(iGpios_4_iReg_offset)) <= iGpios_7_iReg_dat_i(1-1 downto 0);
                    end if;
                    iBus_dev_dats(4) <= "00000000";
                else
                    iBus_dev_dats(4) <= resize(iGpios_4_iReg_lregs(to_integer(iGpios_4_iReg_offset)), 8);
                end if;
            else
                iBus_dev_dats(4) <= "00000000";
                iBus_dev_acks(4) <= '0';
            end if;
        end if;
    end if;
end process SIMPLE_TOP_IGPIOS_4_IREG_HDL_WB_REGISTER;



pouts(4) <= iGpios_4_iReg_lregs(0)(0);
iGpios_4_iReg_lregs(1) <= to_unsigned(pins(4), 1);


SIMPLE_TOP_IGPIOS_5_IREG_HDL_DECODE: process (iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) is
begin
    if (to_boolean(iGpios_7_iReg_cyc) and to_boolean(iGpios_7_iReg_stb) and ((iGpios_7_iReg_adr >= 1280) and (signed(resize(iGpios_7_iReg_adr, 17)) <= (1280 + 1)))) then
        iGpios_5_iReg_selected <= '1';
        iGpios_5_iReg_offset <= resize(iGpios_7_iReg_adr - 1280, 1);
    else
        iGpios_5_iReg_selected <= '0';
        iGpios_5_iReg_offset <= "0";
    end if;
end process SIMPLE_TOP_IGPIOS_5_IREG_HDL_DECODE;


SIMPLE_TOP_IGPIOS_5_IREG_HDL_WB_REGISTER: process (iBus_clk) is
begin
    if rising_edge(iBus_clk) then
        if (not to_boolean(iGpios_7_iReg_rst)) then
            iBus_dev_dats(5) <= "00000000";
            for ii in 0 to 2-1 loop
                iGpios_5_iReg_lregs(ii) <= "0";
            end loop;
        else
            if to_boolean(iGpios_5_iReg_selected) then
                iBus_dev_acks(5) <= '1';
                if to_boolean(iGpios_7_iReg_we) then
                    if (not to_integer(iGpios_5_iReg_ReadOnly(to_integer(iGpios_5_iReg_offset)))) then
                        iGpios_5_iReg_lregs(to_integer(iGpios_5_iReg_offset)) <= iGpios_7_iReg_dat_i(1-1 downto 0);
                    end if;
                    iBus_dev_dats(5) <= "00000000";
                else
                    iBus_dev_dats(5) <= resize(iGpios_5_iReg_lregs(to_integer(iGpios_5_iReg_offset)), 8);
                end if;
            else
                iBus_dev_dats(5) <= "00000000";
                iBus_dev_acks(5) <= '0';
            end if;
        end if;
    end if;
end process SIMPLE_TOP_IGPIOS_5_IREG_HDL_WB_REGISTER;



pouts(5) <= iGpios_5_iReg_lregs(0)(0);
iGpios_5_iReg_lregs(1) <= to_unsigned(pins(5), 1);


SIMPLE_TOP_IGPIOS_6_IREG_HDL_DECODE: process (iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) is
begin
    if (to_boolean(iGpios_7_iReg_cyc) and to_boolean(iGpios_7_iReg_stb) and ((iGpios_7_iReg_adr >= 1536) and (signed(resize(iGpios_7_iReg_adr, 17)) <= (1536 + 1)))) then
        iGpios_6_iReg_selected <= '1';
        iGpios_6_iReg_offset <= resize(iGpios_7_iReg_adr - 1536, 1);
    else
        iGpios_6_iReg_selected <= '0';
        iGpios_6_iReg_offset <= "0";
    end if;
end process SIMPLE_TOP_IGPIOS_6_IREG_HDL_DECODE;


SIMPLE_TOP_IGPIOS_6_IREG_HDL_WB_REGISTER: process (iBus_clk) is
begin
    if rising_edge(iBus_clk) then
        if (not to_boolean(iGpios_7_iReg_rst)) then
            iBus_dev_dats(6) <= "00000000";
            for ii in 0 to 2-1 loop
                iGpios_6_iReg_lregs(ii) <= "0";
            end loop;
        else
            if to_boolean(iGpios_6_iReg_selected) then
                iBus_dev_acks(6) <= '1';
                if to_boolean(iGpios_7_iReg_we) then
                    if (not to_integer(iGpios_6_iReg_ReadOnly(to_integer(iGpios_6_iReg_offset)))) then
                        iGpios_6_iReg_lregs(to_integer(iGpios_6_iReg_offset)) <= iGpios_7_iReg_dat_i(1-1 downto 0);
                    end if;
                    iBus_dev_dats(6) <= "00000000";
                else
                    iBus_dev_dats(6) <= resize(iGpios_6_iReg_lregs(to_integer(iGpios_6_iReg_offset)), 8);
                end if;
            else
                iBus_dev_dats(6) <= "00000000";
                iBus_dev_acks(6) <= '0';
            end if;
        end if;
    end if;
end process SIMPLE_TOP_IGPIOS_6_IREG_HDL_WB_REGISTER;



pouts(6) <= iGpios_6_iReg_lregs(0)(0);
iGpios_6_iReg_lregs(1) <= to_unsigned(pins(6), 1);


SIMPLE_TOP_IGPIOS_7_IREG_HDL_DECODE: process (iGpios_7_iReg_cyc, iGpios_7_iReg_adr, iGpios_7_iReg_stb) is
begin
    if (to_boolean(iGpios_7_iReg_cyc) and to_boolean(iGpios_7_iReg_stb) and ((iGpios_7_iReg_adr >= 1792) and (signed(resize(iGpios_7_iReg_adr, 17)) <= (1792 + 1)))) then
        iGpios_7_iReg_selected <= '1';
        iGpios_7_iReg_offset <= resize(iGpios_7_iReg_adr - 1792, 1);
    else
        iGpios_7_iReg_selected <= '0';
        iGpios_7_iReg_offset <= "0";
    end if;
end process SIMPLE_TOP_IGPIOS_7_IREG_HDL_DECODE;


SIMPLE_TOP_IGPIOS_7_IREG_HDL_WB_REGISTER: process (iBus_clk) is
begin
    if rising_edge(iBus_clk) then
        if (not to_boolean(iGpios_7_iReg_rst)) then
            iBus_dev_dats(7) <= "00000000";
            for ii in 0 to 2-1 loop
                iGpios_7_iReg_lregs(ii) <= "0";
            end loop;
        else
            if to_boolean(iGpios_7_iReg_selected) then
                iBus_dev_acks(7) <= '1';
                if to_boolean(iGpios_7_iReg_we) then
                    if (not to_integer(iGpios_7_iReg_ReadOnly(to_integer(iGpios_7_iReg_offset)))) then
                        iGpios_7_iReg_lregs(to_integer(iGpios_7_iReg_offset)) <= iGpios_7_iReg_dat_i(1-1 downto 0);
                    end if;
                    iBus_dev_dats(7) <= "00000000";
                else
                    iBus_dev_dats(7) <= resize(iGpios_7_iReg_lregs(to_integer(iGpios_7_iReg_offset)), 8);
                end if;
            else
                iBus_dev_dats(7) <= "00000000";
                iBus_dev_acks(7) <= '0';
            end if;
        end if;
    end if;
end process SIMPLE_TOP_IGPIOS_7_IREG_HDL_WB_REGISTER;



pouts(7) <= iGpios_7_iReg_lregs(0)(0);
iGpios_7_iReg_lregs(1) <= to_unsigned(pins(7), 1);


SIMPLE_TOP_IBUS_HDL_OR_COMBINE: process (iBus_dev_dats(0), iBus_dev_dats(1), iBus_dev_dats(2), iBus_dev_dats(3), iBus_dev_dats(4), iBus_dev_dats(5), iBus_dev_dats(6), iBus_dev_dats(7), iBus_dev_acks(0), iBus_dev_acks(1), iBus_dev_acks(2), iBus_dev_acks(3), iBus_dev_acks(4), iBus_dev_acks(5), iBus_dev_acks(6), iBus_dev_acks(7)) is
    variable acks: integer;
    variable dats: integer;
begin
    dats := 0;
    acks := 0;
    for ii in 0 to 8-1 loop
        dats := to_integer((to_unsigned(dats, 8) or iBus_dev_dats(ii)));
        acks := to_integer((to_std_logic(acks) or iBus_dev_acks(ii)));
    end loop;
    iBus_dat_i <= to_unsigned(dats, 8);
    iBus_ack <= to_std_logic(acks);
end process SIMPLE_TOP_IBUS_HDL_OR_COMBINE;


SIMPLE_TOP_HDL_ASSIGNS: process (buttons, pouts(0), pouts(1), pouts(2), pouts(3), pouts(4), pouts(5), pouts(6), pouts(7)) is
begin
    for ii in 0 to 8-1 loop
        leds(ii) <= pouts(ii);
        pins(ii) <= buttons(ii);
    end loop;
end process SIMPLE_TOP_HDL_ASSIGNS;

end architecture MyHDL;
