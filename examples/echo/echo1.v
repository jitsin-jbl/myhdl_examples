// File: echo1.v
// Generated by MyHDL 0.8dev
// Date: Tue Jul 17 21:51:08 2012


`timescale 1ns/10ps

module echo1 (
    clock,
    reset,
    au_fs,
    au_in,
    au_out
);
// Single channel echo
// 
// The following is a basic single channel echo.  An input sample
// is combined with a delayed version of the sample.  This module is 
// the hardware description of the audio echo.  This description will
// be converted to Verilog/VHDL and bit-stream generated using the 
// vendor tools.
// 
// The delay is constant and set by the C_BD parameter.  
// 
// Ports
// ---------------------------------------------
//   :param au_fs:  input, sample rate strobe
//   :param au_in:  input, audio sample input
//   :param au_out: output, audio sample output
//    
// Configurable Parameters:
// ---------------------------------------------
//    :param C_BD:    Delay buffer depth / len
//    :param C_BW:    Delay buffer word width
//    :param C_SR:    Sample rate
//    :param C_SW:    Input sample bit width
//    :param XDEVICE: Which Xilinx FPGA (BRAM utilization)

input clock;
input reset;
input au_fs;
input [23:0] au_in;
output [23:0] au_out;
reg [23:0] au_out;

reg _fs;
reg signed [23:0] _in;
reg [13:0] rd_ptr;
reg signed [23:0] _out;
reg [13:0] wr_ptr;

reg signed [15:0] mem [0:16384-1];




always @(posedge clock, negedge reset) begin: ECHO1_HDL_DESC
    if ((reset == 0)) begin
        rd_ptr <= 0;
        wr_ptr <= 0;
        _fs <= 1'b0;
        _in <= 0;
        _out <= 0;
        au_out <= 0;
    end
    else begin
        if ((rd_ptr != wr_ptr)) begin
            rd_ptr <= wr_ptr;
        end
        else begin
            _fs <= au_fs;
            _in <= au_in;
            if (_fs) begin
                mem[wr_ptr] <= $signed(_in >>> (8 + 1));
                wr_ptr <= ((wr_ptr + 1) % 16384);
                rd_ptr <= ((wr_ptr + 1) % 16384);
                _out <= (mem[rd_ptr] << 8);
            end
            au_out <= (_in + _out);
        end
    end
end

endmodule
