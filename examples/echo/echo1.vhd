-- File: echo1.vhd
-- Generated by MyHDL 0.8dev
-- Date: Tue Jul 17 21:51:15 2012


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_08dev.all;

entity echo1 is
    port (
        clock: in std_logic;
        reset: in std_logic;
        au_fs: in std_logic;
        au_in: in unsigned(23 downto 0);
        au_out: out unsigned(23 downto 0)
    );
end entity echo1;
-- Single channel echo
-- 
-- The following is a basic single channel echo.  An input sample
-- is combined with a delayed version of the sample.  This module is 
-- the hardware description of the audio echo.  This description will
-- be converted to Verilog/VHDL and bit-stream generated using the 
-- vendor tools.
-- 
-- The delay is constant and set by the C_BD parameter.  
-- 
-- Ports
-- ---------------------------------------------
--   :param au_fs:  input, sample rate strobe
--   :param au_in:  input, audio sample input
--   :param au_out: output, audio sample output
--    
-- Configurable Parameters:
-- ---------------------------------------------
--    :param C_BD:    Delay buffer depth / len
--    :param C_BW:    Delay buffer word width
--    :param C_SR:    Sample rate
--    :param C_SW:    Input sample bit width
--    :param XDEVICE: Which Xilinx FPGA (BRAM utilization)

architecture MyHDL of echo1 is

signal _fs: std_logic;
signal _in: signed (23 downto 0);
signal rd_ptr: unsigned(13 downto 0);
signal _out: signed (23 downto 0);
signal wr_ptr: unsigned(13 downto 0);
type t_array_mem is array(0 to 16384-1) of signed (15 downto 0);
signal mem: t_array_mem;

begin




ECHO1_HDL_DESC: process (clock, reset) is
begin
    if (reset = '0') then
        rd_ptr <= "00000000000000";
        wr_ptr <= "00000000000000";
        _fs <= '0';
        _in <= "000000000000000000000000";
        _out <= "000000000000000000000000";
        au_out <= "000000000000000000000000";
    elsif rising_edge(clock) then
        if (rd_ptr /= wr_ptr) then
            rd_ptr <= wr_ptr;
        else
            _fs <= au_fs;
            _in <= signed(au_in);
            if to_boolean(_fs) then
                mem(to_integer(wr_ptr)) <= resize(shift_right(_in, (8 + 1)), 16);
                wr_ptr <= ((wr_ptr + 1) mod 16384);
                rd_ptr <= ((wr_ptr + 1) mod 16384);
                _out <= shift_left(resize(mem(to_integer(rd_ptr)), 24), 8);
            end if;
            au_out <= unsigned(_in + _out);
        end if;
    end if;
end process ECHO1_HDL_DESC;

end architecture MyHDL;
