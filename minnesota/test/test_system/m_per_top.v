// File: m_per_top.v
// Generated by MyHDL 0.9dev
// Date: Fri Feb 13 06:11:00 2015


`timescale 1ns/10ps

module m_per_top (
    clock,
    reset,
    mon
);


input clock;
input reset;
input [7:0] mon;

wire [7:0] gp1_g_regfile_mappings_0_nmb;
wire gp1_g_regfile_busi_wb_we_i;
wire gp1_g_regfile_busi_lwb_acc;
wire gp1_g_regfile_busi_lwb_wr;
reg gp1_g_regfile_busi_lwb_sel;
wire [15:0] gp1_g_regfile_busi_wb_adr_i;
reg gp1_g_regfile_busi_lwb_ack;
wire gp1_g_regfile_busi_wb_stb_i;
reg [7:0] gp1_g_regfile_busi_lwb_do;
wire gp1_g_regfile_busi_wb_cyc_i;
reg [0:0] gp1_g_regfile_busi_ackcnt;
wire [7:0] gp1_g_regfile_busi_wb_dat_i;
reg gp1_g_regfile_busi_newcyc;

reg [7:0] gp1_g_regfile_busi_rl [0:6-1];
reg gp1_g_regfile_busi_prd [0:6-1];
reg gp1_g_regfile_busi_pwr [0:6-1];

assign gp1_g_regfile_busi_wb_we_i = 0;
assign gp1_g_regfile_busi_wb_adr_i = 0;
assign gp1_g_regfile_busi_wb_stb_i = 0;
assign gp1_g_regfile_busi_wb_cyc_i = 0;
assign gp1_g_regfile_busi_wb_dat_i = 0;

assign gp1_g_regfile_mappings_0_nmb[7] = None;
assign gp1_g_regfile_mappings_0_nmb[6] = None;
assign gp1_g_regfile_mappings_0_nmb[5] = None;
assign gp1_g_regfile_mappings_0_nmb[4] = None;
assign gp1_g_regfile_mappings_0_nmb[3] = None;
assign gp1_g_regfile_mappings_0_nmb[2] = None;
assign gp1_g_regfile_mappings_0_nmb[1] = None;
assign gp1_g_regfile_mappings_0_nmb[0] = None;


always @(posedge clock) begin: M_PER_TOP_GP1_G_REGFILE_BUSI_RTL_READ
    integer ii;
    integer aa;
    if ((reset == 1)) begin
        for (ii=0; ii<6; ii=ii+1) begin
            gp1_g_regfile_busi_prd[ii] <= 1'b0;
        end
    end
    else begin
        if ((gp1_g_regfile_busi_lwb_sel && (!gp1_g_regfile_busi_lwb_wr))) begin
            for (ii=0; ii<6; ii=ii+1) begin
                case (ii)
                    0: aa = 24;
                    1: aa = 32;
                    2: aa = 64;
                    3: aa = 128;
                    4: aa = 256;
                    default: aa = 512;
                endcase
                if (($signed({1'b0, gp1_g_regfile_busi_wb_adr_i}) == aa)) begin
                    gp1_g_regfile_busi_lwb_do <= gp1_g_regfile_busi_rl[ii];
                    gp1_g_regfile_busi_prd[ii] <= 1'b1;
                end
            end
        end
        else begin
            gp1_g_regfile_busi_lwb_do <= 0;
            for (ii=0; ii<6; ii=ii+1) begin
                gp1_g_regfile_busi_prd[ii] <= 1'b0;
            end
        end
    end
end


always @(posedge clock) begin: M_PER_TOP_GP1_G_REGFILE_BUSI_RTL_SELECTED
    if (reset == 1) begin
        gp1_g_regfile_busi_lwb_sel <= 0;
        gp1_g_regfile_busi_ackcnt <= 1;
        gp1_g_regfile_busi_lwb_ack <= 0;
        gp1_g_regfile_busi_newcyc <= 0;
    end
    else begin
        if (gp1_g_regfile_busi_wb_cyc_i) begin
            if ((gp1_g_regfile_busi_ackcnt > 0)) begin
                gp1_g_regfile_busi_ackcnt <= (gp1_g_regfile_busi_ackcnt - 1);
                if ((gp1_g_regfile_busi_ackcnt == 1)) begin
                    gp1_g_regfile_busi_newcyc <= 1'b1;
                end
            end
        end
        else begin
            gp1_g_regfile_busi_ackcnt <= 1;
        end
        if ((gp1_g_regfile_busi_wb_cyc_i && (gp1_g_regfile_busi_wb_adr_i >= 0) && (gp1_g_regfile_busi_wb_adr_i <= 512))) begin
            gp1_g_regfile_busi_lwb_sel <= 1'b1;
        end
        else begin
            gp1_g_regfile_busi_lwb_sel <= 1'b0;
        end
        if ((gp1_g_regfile_busi_wb_cyc_i && gp1_g_regfile_busi_newcyc)) begin
            gp1_g_regfile_busi_lwb_ack <= 1'b1;
            gp1_g_regfile_busi_newcyc <= 1'b0;
        end
        else begin
            gp1_g_regfile_busi_lwb_ack <= 1'b0;
        end
    end
end



assign gp1_g_regfile_busi_lwb_acc = (gp1_g_regfile_busi_wb_cyc_i & gp1_g_regfile_busi_wb_stb_i);
assign gp1_g_regfile_busi_lwb_wr = ((gp1_g_regfile_busi_wb_cyc_i & gp1_g_regfile_busi_wb_stb_i) & gp1_g_regfile_busi_wb_we_i);


always @(posedge clock) begin: M_PER_TOP_GP1_G_REGFILE_BUSI_RTL_WRITE
    integer ii;
    integer aa;
    integer dd;
    integer ro;
    if ((reset == 1)) begin
        for (ii=0; ii<6; ii=ii+1) begin
            case (ii)
                0: ro = 0;
                1: ro = 0;
                2: ro = 0;
                3: ro = 0;
                4: ro = 1;
                5: ro = 1;
                6: ro = 1;
                default: ro = 1;
            endcase
            case (ii)
                0: dd = 0;
                1: dd = 222;
                2: dd = 202;
                3: dd = 251;
                4: dd = 170;
                default: dd = 0;
            endcase
            if ((!ro)) begin
                gp1_g_regfile_busi_rl[ii] <= dd;
            end
            gp1_g_regfile_busi_pwr[ii] <= 1'b0;
        end
    end
    else begin
        if ((gp1_g_regfile_busi_lwb_wr && gp1_g_regfile_busi_lwb_sel)) begin
            for (ii=0; ii<6; ii=ii+1) begin
                case (ii)
                    0: aa = 24;
                    1: aa = 32;
                    2: aa = 64;
                    3: aa = 128;
                    4: aa = 256;
                    default: aa = 512;
                endcase
                case (ii)
                    0: ro = 0;
                    1: ro = 0;
                    2: ro = 0;
                    3: ro = 0;
                    4: ro = 1;
                    5: ro = 1;
                    6: ro = 1;
                    default: ro = 1;
                endcase
                if (((!ro) && ($signed({1'b0, gp1_g_regfile_busi_wb_adr_i}) == aa))) begin
                    gp1_g_regfile_busi_rl[ii] <= gp1_g_regfile_busi_wb_dat_i;
                end
            end
        end
        else begin
            for (ii=0; ii<6; ii=ii+1) begin
                gp1_g_regfile_busi_pwr[ii] <= 1'b0;
            end
        end
    end
end



assign gp1_g_regfile_busi_rl[5] = gp1_g_regfile_mappings_0_nmb;

endmodule
